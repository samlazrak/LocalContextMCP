# Multi-stage build for comprehensive MCP server
FROM node:18-alpine AS node-dependencies

# Install Node.js MCP servers
RUN npm install -g \
    @modelcontextprotocol/server-github \
    @modelcontextprotocol/server-sqlite \
    @modelcontextprotocol/server-brave-search \
    @modelcontextprotocol/server-fetch \
    @modelcontextprotocol/server-puppeteer \
    @modelcontextprotocol/server-memory \
    @modelcontextprotocol/server-sequential-thinking \
    @modelcontextprotocol/server-time \
    @modelcontextprotocol/server-slack \
    @modelcontextprotocol/server-notion \
    @modelcontextprotocol/server-sentry

FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    git \
    postgresql-client \
    docker.io \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Copy Node.js MCP servers from previous stage
COPY --from=node-dependencies /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=node-dependencies /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy Python requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY comprehensive_mcp_server.py .
COPY code_intelligence.py .
COPY file_watcher.py .
COPY language_support.py .
COPY *.py .

# Create directories
RUN mkdir -p logs /app/data

# Create non-root user
RUN useradd -m -u 1000 mcpuser && \
    chown -R mcpuser:mcpuser /app
USER mcpuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start command
CMD ["python", "comprehensive_mcp_server.py"]