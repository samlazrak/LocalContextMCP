version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comprehensive-mcp-db
    environment:
      POSTGRES_DB: comprehensive_mcp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d comprehensive_mcp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama for local AI models
  ollama:
    image: ollama/ollama:latest
    container_name: comprehensive-mcp-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Comprehensive MCP Server
  comprehensive-mcp:
    build:
      context: .
      dockerfile: Dockerfile.comprehensive
    container_name: comprehensive-mcp-server
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: comprehensive_mcp
      PGUSER: postgres
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # LLM Configuration (Local)
      DEEPSEEK_API_BASE: http://host.docker.internal:8000/v1
      DEEPSEEK_MODEL: deepseek-coder
      GRANITE_API_BASE: http://ollama:11434/v1
      
      # Server Configuration
      MCP_HOST: 0.0.0.0
      MCP_PORT: 8080
      DEBUG: ${DEBUG:-false}
      
      # Optional API Keys
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      NOTION_TOKEN: ${NOTION_TOKEN}
    volumes:
      - ./logs:/app/logs
      - ~/.ssh:/root/.ssh:ro  # For Git operations
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker MCP server
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: comprehensive-mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx for load balancing (optional)
  nginx:
    image: nginx:alpine
    container_name: comprehensive-mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - comprehensive-mcp
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: comprehensive-mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: comprehensive-mcp-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local